

//PRACTICAL 3
//NAME: Kaiwalya Joshi
//ROLL: 59 - B3

========================================================================================================
(1)Write a query to create range portioned table:
 Creates a table named- Sales consisting of four partitions, one for each quarter
of sales. The columns sale_year, sale_month, and sale_day are the partitioning
columns, while their values constitute the partitioning key of a specific row.
 Each partition is given a name (sales_q1, sales_q2, ...), and each partition is
contained in a separate tablespace (tsa, tsb, ...)
 The columns for table must be prod_id, cust_id, promo_id, quantify sold,
amount_sold – all in number format and time_id.
-------------------------------------------------------------------------------------------------------

create tablespace tsaq1 datafile 'C:\TEMP\tsaq1.dbf' SIZE 10M;
create tablespace tsaq2 datafile 'C:\TEMP\tsaq2.dbf' SIZE 10M;
create tablespace tsaq3  datafile 'C:\TEMP\tsaq3.dbf' SIZE 10M;
create tablespace tsaq4 datafile 'C:\TEMP\tsaq4.dbf' SIZE 10M;

create table sales (
prod_id number(6),
cust_id number,
time_id date,
promo_id number(6),
quantitiy_sold number(6),
amount_sold number(10,2))
partition by range (time_id) 
(
 partition sales_q1 values less than(to_date('01-APR-2006','DD-MON-YYYY')) TABLESPACE tsaq1,
 partition sales_q2 values less than(to_date('01-JUL-2006','DD-MON-YYYY')) TABLESPACE tsaq2,
 partition sales_q3 values less than(to_date('01-OCT-2006','DD-MON-YYYY')) TABLESPACE tsaq3,
 partition sales_q4 values less than(to_date('01-JAN-2007','DD-MON-YYYY')) TABLESPACE tsaq4
);


insert into sales values (109,1,'12-FEB-2006',1111,10,10.2);
insert into sales values (110,2,'12-JUN-2006',1111,10,10.2);
insert into sales values (111,3,'12-AUG-2006',1111,10,10.2);
insert into sales values (112,4,'11-DEC-2006',1111,10,10.2);

insert into sales values (120,1,'12-JAN-2006',1111,10,10.2);
insert into sales values (121,2,'18-JUL-2006',1111,10,10.2);
insert into sales values (122,3,'16-SEPT-2006',1111,10,10.2);
insert into sales values (124,4,'13-NOV-2006',1111,10,10.2);

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

SQL>  select*from sales partition(sales_q2);

   PROD_ID    CUST_ID TIME_ID     PROMO_ID QUANTITIY_SOLD AMOUNT_SOLD
---------- ---------- --------- ---------- -------------- -----------
       110          2 12-JUN-06       1111             10        10.2
       110          2 12-JUN-06       1111             10        10.2

SQL>  select*from sales partition(sales_q3);

   PROD_ID    CUST_ID TIME_ID     PROMO_ID QUANTITIY_SOLD AMOUNT_SOLD
---------- ---------- --------- ---------- -------------- -----------
       111          3 12-AUG-06       1111             10        10.2
       111          3 12-AUG-06       1111             10        10.2
       121          2 18-JUL-06       1111             10        10.2

SQL>  select*from sales partition(sales_q4);

   PROD_ID    CUST_ID TIME_ID     PROMO_ID QUANTITIY_SOLD AMOUNT_SOLD
---------- ---------- --------- ---------- -------------- -----------
       112          4 11-DEC-06       1111             10        10.2
       112          4 11-DEC-06       1111             10        10.2
       124          4 13-NOV-06       1111             10        10.2

SQL>  select*from sales partition(sales_q1);

   PROD_ID    CUST_ID TIME_ID     PROMO_ID QUANTITIY_SOLD AMOUNT_SOLD
---------- ---------- --------- ---------- -------------- -----------
       109          1 12-FEB-06       1111             10        10.2
       109          1 12-FEB-06       1111             10        10.2
       120          1 12-JAN-06       1111             10        10.2


========================================================================================================================

2. Create the same table as in Q1. With a different name with ENABLE ROW
MOVEMENT
-------------------------------------------------------------------------------------------------------


create table sales1(
prod_id number(6),
cust_id number,
time_id date,
promo_id number(6),
quantitiy_sold number(6),
amount_sold number(10,2))
partition by range (time_id) 
(
 partition sales_q1 values less than(to_date('01-APR-2006','DD-MON-YYYY')) TABLESPACE tsa,
 partition sales_q2 values less than(to_date('01-JUL-2006','DD-MON-YYYY')) TABLESPACE tsa1,
 partition sales_q3 values less than(to_date('01-OCT-2006','DD-MON-YYYY')) TABLESPACE tsa2,
 partition sales_q4 values less than (to_date('01-JAN-2007','DD-MON-YYYY')) TABLESPACE tsa3
)
enable row movement;

========================================================================================================================
3. Create a table with list partition as follows: 
➢ Table having columns deptno, deptname, quarterly_sales and state. ➢ Create partition on state: 
• Northwest on OR and WA 
• Southwest on AZ, UT and NM 
• northeast on NY, VM and NJ 
• southeast on FL and GA 
• northcentral on SD and WI 
• southcentral on OK and TX ➢ Add the following entries into the table and make conclusion to which partition 
the entry maps: 
• (10, 'accounting', 100, 'WA') 
• (20, 'R&D', 150, 'OR') 
• (30, 'sales', 100, 'FL') 
• (40, 'HR', 10, 'TX') 
• (50, 'systems engineering', 10, 'CA') 


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

CREATE TABLE sales_by_region
      (deptno number, 
       deptname varchar2(20),
       quarterly_sales number(10, 2),
       state varchar2(2))
   PARTITION BY LIST (state)
      (PARTITION NORTHWEST VALUES ('OR', 'WA'),
       PARTITION SOUTHWEST VALUES ('AZ', 'UT', 'NM'),
       PARTITION NORTHEAST VALUES  ('NY', 'VM', 'NJ'),
      PARTITION SOUTHEAST VALUES ('FL', 'GA'),
 PARTITION NORTHCENTRAL VALUES ('SD', 'WI'),
 PARTITION SOUTHCENTRAL VALUES ('OK', 'TX')
 )
enable row movement;



insert into sales_by_region values (10,'accounting',100,'WA');
insert into sales_by_region values (20,'R and D',150,'OR');
insert into sales_by_region values (30,'sales',100,'FL');
insert into sales_by_region values (50,'systems engineering',10,'CA');

//error in last 


Alter table sales_by_region add partition defaultarea values(default);


    DEPTNO DEPTNAME             QUARTERLY_SALES ST
---------- -------------------- --------------- --
        10 accounting                       100 WA
        20 R and D                          150 OR
        30 sales                            100 FL
        50 systems engineering               10 CA
==================================================================================================================================================


Q4)4. Create a table with hash partition as follows: 
• Create table Emp with attributes empno, job, sal, deptno and perform hash partitioning on empno. Number of Partitions should be 5. 
Demonstarte using system defined and user defined partition concepts. 


Create table Employee_hash
(emp_no number(2),
job varchar (20),
sal number(16),
deptno varchar(20)
)
partition by hash(emp_no) 
partitions 5;
exec dbms_stats.gather_table_stats('kj59','employee_hash');
insert into employee_hash values(4,'Architect',100,'100');
insert into employee_hash values(8,'MBA',100,'100');
insert into employee_hash values(14,'CA',100,'100');
insert into employee_hash values(15,'CA',200,'100');

SQL> exec dbms_stats.gather_table_stats('kj59','employee_hash');

SQL> select partition_name,TABLESPACE_NAME,NUM_ROWS from user_tab_partitions where table_name='EMPLOYEE_HASH';

PARTITION_NAME                 TABLESPACE_NAME                  NUM_ROWS
------------------------------ ------------------------------ ----------
SYS_P21                        USERS                                   0
SYS_P22                        USERS                                   0
SYS_P23                        USERS                                   1
SYS_P24                        USERS                                   3
SYS_P25                        USERS                                   0

==============================================================================================================================================

Q5)
5. Create a multi-column range partitioned table as directed: 
➢ Create a table with the actual DATE information in three separate 
columns: year, month, and day. Also amount_ sold. ➢ Create following partitions: 
o Before 2001: Less than jan 2001 o Less than april 2001 o Less than july 2001 o Les than oct 2001 o Less than jan 2002 o Future with max incoming value ➢ Insert values into table and show to which partition does the value belong. 
o (2001,3,17, 2000); o (2001,11,1, 5000); 
o (2002,1,1, 4000); Make conclusion for each result. 

Create table date_data
(date_year number(4),
date_month number (2),
date_day number(2),
amount_sold number(20)
)
partition by range(date_year,date_month)(
partition  p1 values less than(2001,01),
partition  p2 values less than(2001,04),
partition  p3 values less than(2001,07),
partition  p4 values less than(2001,10),
partition  p5 values less than(2002,01), 
partition  p6 values less than(maxvalue,maxvalue)
);


insert into date_data values(2001,3,17, 2000);
insert into date_data values(2001,11,1, 5000);
insert into date_data values(2002,1,1, 4000);
insert into date_data values(2002,6,1, 4000);


exec dbms_stats.gather_table_stats('kj59'date_data');
select partition_name,TABLESPACE_NAME,NUM_ROWS from user_tab_partitions where table_name='DATE_DATA';

PARTITION_NAME                 TABLESPACE_NAME                  NUM_ROWS
------------------------------ ------------------------------ ----------
P1                             USERS
P2                             USERS
P3                             USERS
P4                             USERS
P5                             USERS
P6                             USERS

6 rows selected.

SELECT * FROM date_data partition(p1);
SELECT * FROM date_data partition(p2);
SELECT * FROM date_data partition(p3);
SELECT * FROM date_data partition(p4);
SELECT * FROM date_data partition(p5);

SQL> SELECT * FROM date_data partition(p1);

no rows selected

SQL> SELECT * FROM date_data partition(p2);

 DATE_YEAR DATE_MONTH   DATE_DAY AMOUNT_SOLD
---------- ---------- ---------- -----------
      2001          3         17        2000

SQL> SELECT * FROM date_data partition(p3);

no rows selected

SQL> SELECT * FROM date_data partition(p4);

no rows selected

SQL> SELECT * FROM date_data partition(p5);

 DATE_YEAR DATE_MONTH   DATE_DAY AMOUNT_SOLD
---------- ---------- ---------- -----------
      2001         11          1        5000

========================================================================================================


Q6)Create a multicolumn partitioned table as directed: 
➢ Table supplier_parts, storing the information about which suppliers deliver 
which parts. To distribute the data in equal-sized partitions, it is not sufficient to partition the table based on the supplier_id, because some suppliers might provide hundreds of thousands of parts, while others provide only a few specialty parts. Instead, you partition the table on (supplier_id, partnum) to manually enforce equal-sized partitions. ➢ Insert the following values 
(5,5, 1000); (5,150, 1000); (10,100, 1000); 


Create table supplier_parts
(
supplier_id number(4),
part_num number (4),
amount number(10))
partition by range(supplier_id,part_num)(
partition  p1 values less than(10,100),
partition  p2 values less than(20,200),
partition  p3 values less than(30,300),
partition  p4 values less than(40,400), 
partition  p5 values less than(maxvalue,maxvalue)
);

insert into supplier_parts values(19,350,1000);
insert into supplier_parts values(5,5, 1000);
insert into supplier_parts values(5,150, 1000);
insert into supplier_parts values(10,100, 1000);


SELECT * FROM supplier_parts partition(p1);
SELECT * FROM supplier_parts partition(p2);
SELECT * FROM supplier_parts partition(p3);
SELECT * FROM supplier_parts partition(p4);
SELECT * FROM supplier_parts partition(p5);

SQL> SELECT * FROM supplier_parts partition(p1);
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
SUPPLIER_ID   PART_NUM     AMOUNT
----------- ---------- ----------
          5          5       1000
          5        150       1000

SQL> SELECT * FROM supplier_parts partition(p2);

SUPPLIER_ID   PART_NUM     AMOUNT
----------- ---------- ----------
         19        350       1000
         10        100       1000

SQL> SELECT * FROM supplier_parts partition(p3);

no rows selected

SQL> SELECT * FROM supplier_parts partition(p4);

no rows selected

SQL> SELECT * FROM supplier_parts partition(p5);

no rows selected
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

exec dbms_stats.gather_table_stats('kj59','supplier_parts');

select partition_name,TABLESPACE_NAME,NUM_ROWS from user_tab_partitions where table_name='SUPPLIER_PARTS';

PARTITION_NAME                 TABLESPACE_NAME                  NUM_ROWS
------------------------------ ------------------------------ ----------
P1                             USERS                                   2
P2                             USERS                                   2
P3                             USERS                                   0
P4                             USERS                                   0
P5                             USERS                                   0

===========================================================================================================================


========================================================================================================

Q7. Create interval partitioned table as directed: 
	
	Creates a table named- Sales consisting of four partitions, one 
	for each quarter of sales. Each partition is given a name (sales_q1, sales_q2, ...) 
	
	The columns for table must be prod_id, cust_id, promo_id, quantify sold, 
	amount_sold – all in number format and month in number format 
	
	Perform interval partitioning on month and take interval of 01 months. 
========================================================================================================
 
 CREATE TABLE SALESTAB (
			PROD_ID NUMBER(4),
			CUST_ID NUMBER(4),
			PROMO_ID NUMBER(4),
			TIME_ID DATE,
			QUANTITY_SOLD NUMBER(4),
			AMOUNT_SOLD NUMBER(5),
			MONTHS NUMBER )
			PARTITION BY RANGE(TIME_ID)
			INTERVAL(NUMTOYMINTERVAL(1, 'MONTH'))
			( PARTITION SALES_Q1 VALUES LESS THAN (TO_DATE('1-4-2005','DD-MM-YYYY')),
			  PARTITION SALES_Q2 VALUES LESS THAN (TO_DATE('1-7-2005','DD-MM-YYYY')),
			  PARTITION SALES_Q3 VALUES LESS THAN (TO_DATE('1-10-2005','DD-MM-YYYY')),
			  PARTITION SALES_Q4 VALUES LESS THAN (TO_DATE('1-1-2006','DD-MM-YYYY')));
			  
			  INSERT INTO SALESTAB VALUES (1001, 1001, 1001, (TO_DATE('2-3-2005', 'DD-MM-YYYY')), 10, 10000, 3);
			  
				SQL> INSERT INTO SALESTAB VALUES (1006, 1006, 1006, (TO_DATE('5-6-2005', 'DD-MM-YYYY')), 10, 10000, 7);
				1 row created.

				SQL> INSERT INTO SALESTAB VALUES (1007, 1007, 1007, (TO_DATE('5-6-2005', 'DD-MM-YYYY')), 10, 10000, 10);
				1 row created.

				SQL> INSERT INTO SALESTAB VALUES (1008, 1008, 1008, (TO_DATE('5-6-2005', 'DD-MM-YYYY')), 10, 10000, 11);
				1 row created.
		
				SQL> EXEC DBMS_STATS.GATHER_TABLE_STATS('kj59', 'SALESTAB');

				PL/SQL procedure successfully completed.

				SQL> select partition_name,TABLESPACE_NAME,NUM_ROWS from user_tab_partitions where table_name='SALESTAB';

				PARTITION_NAME                 TABLESPACE_NAME                  NUM_ROWS
				------------------------------ ------------------------------ ----------
				SALES_Q1                       USERS                                   1
				SALES_Q2                       USERS                                   4
				SALES_Q3                       USERS                                   0
				SALES_Q4                       USERS                                   3
				
========================================================================================================				
Q8) Demonstrate reference partitioning as directed: 
	
	 Create parent table Orders with the attributes order_id, order_date, customer_id, 
	shipper_id. 
	
	 Perform Range partitioning on Order Date. Take Range of 03 Months i.e. 01 quarter 
	
	 Create child table order_items with attributes order_id, product_id, price and quantity. 
	
	 Perform Reference partitioning on child table.  Delete the created partitions. 
========================================================================================================-----------------------------------------------------------------------
	
	CREATE TABLE ORDERS (
			ORDERID NUMBER(5) PRIMARY KEY,
			ORDERDATE DATE,
			CUSTID NUMBER,
			SHIPPERID NUMBER(5))
			PARTITION BY RANGE(ORDERDATE)
			( PARTITION Q1 VALUES LESS THAN (TO_DATE('1-4-2005','DD-MM-YYYY')),
			  PARTITION Q2 VALUES LESS THAN (TO_DATE('1-7-2005','DD-MM-YYYY')),
			  PARTITION Q3 VALUES LESS THAN (TO_DATE('1-10-2005','DD-MM-YYYY')),
			  PARTITION Q4 VALUES LESS THAN (TO_DATE('1-1-2006','DD-MM-YYYY')));
			  
			CREATE TABLE ORDER_ITEMS(
				ORDERID NUMBER(5) PRIMARY KEY,
				PRODUCT_ID NUMBER(5),
				PRICE NUMBER(5),
				QUANTITY NUMBER(3),
				CONSTRAINT ORDER_ITEM_FK FOREIGN KEY (ORDERID) REFERENCES ORDERS
			)
			PARTITION BY REFERENCE (ORDER_ITEM_FK);
			INSERT INTO ORDERS VALUES (111, TO_DATE('2-3-2005','DD-MM-YYYY'),500,20);
			INSERT INTO ORDER_ITEMS VALUES (111,300,5000,20);
			select partition_name,TABLESPACE_NAME,NUM_ROWS from user_tab_partitions where table_name='LIST_HASH';
			
			ALTER TABLE ORDERS DROP PARTITION Q1;
		exec dbms_stats.gather_table_stats('kj59','ORDER_ITEMS');
		exec dbms_stats.gather_table_stats('kj59','ORDERS');

		select partition_name,TABLESPACE_NAME,NUM_ROWS from user_tab_partitions where table_name='ORDER_ITEMS';

		PARTITION_NAME                 TABLESPACE_NAME                  NUM_ROWS
		------------------------------ ------------------------------ ----------
		P1                             USERS                                   1
		P2                             USERS                                   0
		P3                             USERS                                   0
		P4                             USERS                                   0

		SQL> select partition_name,TABLESPACE_NAME,NUM_ROWS from user_tab_partitions where table_name='ORDERS';

		PARTITION_NAME                 TABLESPACE_NAME                  NUM_ROWS
		------------------------------ ------------------------------ ----------
		P1                             USERS                                   1
		P2                             USERS                                   0
		P3                             USERS                                   0
		P4                             USERS                                   0
		
		SQL> ALTER TABLE ORDERS DROP PARTITION P1;
	
========================================================================================================

Q9. Implement virtual column based partitioning as below: 
	Create table employee with attributes Emp_id, emp_name, fixed_salary, variable_salary. 
	Generate Total salary as virtual colum. 
	
	Perform range partitioning on Total Salary with four partitions as below: 
		o Partition P1 stores salary less than 25000 
		o Partition P2 stores salary less than 50000 
		o Partition P3 stores salary less than 75000 
		o Partition P4 stores any  salary above and equal to than 75000 
========================================================================================================

CREATE TABLE EMPLOYEE (
	EMP_ID NUMBER(5),
	EMP_NAME VARCHAR(50),
	FIXED_SALARY NUMBER(5),
	VARIABLE_SALARY NUMBER(5),
	TOTAL_SALARY NUMBER(5) GENERATED ALWAYS AS (FIXED_SALARY + VARIABLE_SALARY ) VIRTUAL )
	PARTITION BY RANGE(TOTAL_SALARY) 
	( PARTITION P1 VALUES LESS THAN (25000),
	  PARTITION P2 VALUES LESS THAN (50000),
	  PARTITION P3 VALUES LESS THAN (75000),
	  PARTITION P4 VALUES LESS THAN (MAXVALUE));
	  
	  INSERT INTO EMPLOYEE (EMP_ID, EMP_NAME, FIXED_SALARY, VARIABLE_SALARY) VALUES  (100, 'KMJ', 26000, 10000);
	  INSERT INTO EMPLOYEE (EMP_ID, EMP_NAME, FIXED_SALARY, VARIABLE_SALARY) VALUES  (101, 'SASHA', 34500, 10000);'
	  
					  EMP_ID EMP_NAME                                           FIXED_SALARY VARIABLE_SALARY TOTAL_SALARY
			---------- -------------------------------------------------- ------------ --------------- ------------
				   100 KMJ                                                       26000           10000        36000
				   101 SASHA                                                     34500           10000        44500

-------------------------------------------------------------------------------------------------------------------------------				   
				   
				   PARTITION_NAME                 TABLESPACE_NAME                  NUM_ROWS
			------------------------------ ------------------------------ ----------
			P1                             USERS                                   0
			P2                             USERS                                   2
			P3                             USERS                                   0
			P4                             USERS                                   0	
========================================================================================================
Q10) Demonstrate Composite partitioning technique as directed 
	Implement range list partitioning for customer table having attributes cust_id, 
	cust_name, cust_state, and time_id 
	
	o Perform range partitioning on time-id and list partitioning on state attributes. 
	Also create maxvalue and default partition for range and list partition respectively. 
	
	o Partition definitions for range are as below:  Partition old should accept values 
	less than  01-Jan-2005 
	 Partition acquired should accept values less than  01-Jan2010 
	 Partition recent should accept values less than  01-Jan-2015 
	 Partition unknown should accept values greater than  01-Jan2015 
		o Partition definitions for list are as below: 
			 Partition west should accept values (‘MH’, ‘GJ’) 
			 Partition south should accept values (‘TN’, ‘AP’) 
			 Partition north should accept values (‘UP’, ‘HP’) 
			 Partition unknown should accept any other state. 
========================================================================================================

 CREATE TABLE CUSTOMER (
		CUST_ID NUMBER(5),
		CUST_NAME VARCHAR(50),
		CUST_STATE VARCHAR(2),
		TIME_ID DATE)
		PARTITION BY RANGE(TIME_ID)
		SUBPARTITION BY LIST(CUST_STATE)
		SUBPARTITION TEMPLATE(
			SUBPARTITION west VALUES ('MH', 'GJ'),
			SUBPARTITION south VALUES ('TN', 'AP'),
			SUBPARTITION north VALUES ('UP', 'HP'),
			SUBPARTITION unaccepted VALUES (default))
		(PARTITION OLD VALUES LESS THAN (TO_DATE('1/01/2005','DD/MM/YYYY')),
		PARTITION ACQUIRED VALUES LESS THAN (TO_DATE('1/01/2010','DD/MM/YYYY')),
		PARTITION RECENT VALUES LESS THAN (TO_DATE('1/01/2015','DD/MM/YYYY')),
		PARTITION UNKNOWN VALUES LESS THAN (MAXVALUE));
		
		INSERT INTO CUSTOMER VALUES (1001, 'JOHN', 'MH', TO_DATE('1/04/2005','DD/MM/YYYY'));
		INSERT INTO CUSTOMER VALUES (1002, 'WILLS', 'GJ', TO_DATE('1/04/2011','DD/MM/YYYY'));
		INSERT INTO CUSTOMER VALUES (1001, 'STEVE', 'UP', TO_DATE('1/04/2014','DD/MM/YYYY'));
		INSERT INTO CUSTOMER VALUES (1003, 'SMITH', 'UP', TO_DATE('1/04/2014','DD/MM/YYYY'));
		
		EXEC DBMS_STATS.GATHER_TABLE_STATS('kj59', 'CUSTOMER');
		select subpartition_name,TABLESPACE_NAME,NUM_ROWS from user_tab_subpartitions where table_name='CUSTOMER';
		select * from customer subpartition(RECENT_NORTH);
					
					
					SQL> select subpartition_name,TABLESPACE_NAME,NUM_ROWS from user_tab_subpartitions where table_name='CUSTOMER';
					SUBPARTITION_NAME              TABLESPACE_NAME                  NUM_ROWS
					------------------------------ ------------------------------ ----------
					OLD_WEST                       USERS                                   0
					OLD_SOUTH                      USERS                                   0
					OLD_NORTH                      USERS                                   0
					OLD_UNACCEPTED                 USERS                                   0
					ACQUIRED_WEST                  USERS                                   1
					ACQUIRED_SOUTH                 USERS                                   0
					ACQUIRED_NORTH                 USERS                                   0
					ACQUIRED_UNACCEPTED            USERS                                   0
					RECENT_WEST                    USERS                                   1
					RECENT_SOUTH                   USERS                                   0
					RECENT_NORTH                   USERS                                   2
					RECENT_UNACCEPTED              USERS                                   0
					UNKNOWN_WEST                   USERS                                   0
					UNKNOWN_SOUTH                  USERS                                   0
					UNKNOWN_NORTH                  USERS                                   0
					UNKNOWN_UNACCEPTED             USERS                                   0
					16 rows selected.
---------------------------------------------------------------------------------------------------------------------------------------------
					
		select * from customer subpartition(RECENT_NORTH);
		
					
			   CUST_ID CUST_NAME                                          CU TIME_ID
			---------- -------------------------------------------------- -- ---------
				  1001 STEVE                                              UP 01-APR-14
				  1001 STEVE                                              UP 01-APR-14
			SQL> INSERT INTO CUSTOMER VALUES (1003, 'SMITH', 'UP', TO_DATE('1/04/2014','DD/MM/YYYY'));
			1 row created.
			SQL> select * from customer subpartition(RECENT_NORTH);
			   CUST_ID CUST_NAME                                          CU TIME_ID
			---------- -------------------------------------------------- -- ---------
				  1001 STEVE                                              UP 01-APR-14
				  1001 STEVE                                              UP 01-APR-14
				  1003 SMITH                                              UP 01-APR-14
		
========================================================================================================

											(Q11 to Q15 )
========================================================================================================		
		
		1. RANGE HASH
		2. RANGE RANGE
		3. LIST LIST
		4. LIST RANGE
		5. LIST HASH
=======================================================================================================

	   
CREATE TABLESPACE TS11 DATAFILE 'C:\Users\admin\Desktop\TS11.dbf' SIZE 10M;
CREATE TABLESPACE TS12 DATAFILE 'C:\Users\admin\Desktop\TS12.dbf' SIZE 10M;
CREATE TABLESPACE TS13 DATAFILE 'C:\Users\admin\Desktop\TS13.dbf' SIZE 10M;
CREATE TABLESPACE TS14 DATAFILE 'C:\Users\admin\Desktop\TS14.dbf' SIZE 10M;
-----------------------------------------------------------------------
RANGE RANGE PARTITIONING :
-----------------------------------------------------------------------
CREATE TABLE COMPOSITE_RANGE (
	CUST_ID NUMBER(10),
	CUST_NAME VARCHAR2(25),
	CUST_STATE VARCHAR2(2),
	TIME_ID DATE)
	PARTITION BY RANGE (TIME_ID)
	SUBPARTITION BY RANGE (CUST_ID) 
	SUBPARTITION TEMPLATE (
		SUBPARTITION ORIGINAL VALUES LESS THAN(1001)
		TABLESPACE TSA1,
		SUBPARTITION ACQUIRED VALUES LESS THAN(2001)
		TABLESPACE TSB2,
		SUBPARTITION GAIN VALUES LESS THAN(5001)
		TABLESPACE TSC3,
		SUBPARTITION RECENT VALUES LESS THAN(MAXVALUE)
		TABLESPACE TSD4)
		(PARTITION PART1 VALUES LESS THAN (TO_DATE('1/01/2005','DD/MM/YYYY')),
		PARTITION PART2 VALUES LESS THAN (TO_DATE('1/01/2010','DD/MM/YYYY')),
		PARTITION PART3 VALUES LESS THAN (TO_DATE('1/01/2015','DD/MM/YYYY')),
		PARTITION FUTURE VALUES LESS THAN (MAXVALUE));
		
		INSERT INTO COMPOSITE_RANGE VALUES ( 1001, 'kj59', 'MH', TO_DATE('3/04/2014','DD/MM/YYYY'));
		INSERT INTO COMPOSITE_RANGE VALUES ( 1003, 'CATY', 'AP', TO_DATE('8/08/2010','DD/MM/YYYY'));
		INSERT INTO COMPOSITE_RANGE VALUES ( 1002, 'CISC', 'MH', TO_DATE('5/08/2004','DD/MM/YYYY'));
		
		PARTITION_NAME                 TABLESPACE_NAME                  NUM_ROWS
------------------------------ ------------------------------ ----------
PART1                          USERS                                   1
PART2                          USERS                                   0
PART3                          USERS                                   2
FUTURE                         USERS                                   0

=======================================================================================================

                                     LIST HASH 
=======================================================================================================
CREATE TABLE LIST_HASH (
	CUST_ID NUMBER(10),
	CUST_NAME VARCHAR2(25),
	CUST_STATE VARCHAR2(2),
	TIME_ID DATE)
	PARTITION BY LIST (CUST_STATE)
	SUBPARTITION BY HASH (CUST_ID) 
	SUBPARTITION TEMPLATE (
		SUBPARTITION SP1 TABLESPACE TSA1,
		SUBPARTITION SP2 TABLESPACE TSB2,
		SUBPARTITION SP3 TABLESPACE TSC3,
		SUBPARTITION SP4 TABLESPACE TSD4)
		(PARTITION WEST VALUES ('OR','WA'),
		 PARTITION EAST VALUES ('AZ','UT','NM'),
		 PARTITION NORTH VALUES ('NY','VM','NJ'),
		 PARTITION SOUTH VALUES ('FL','GA'));
		
		
		
		
		INSERT INTO LIST_HASH VALUES ( 1001, 'kj59', 'OR', TO_DATE('1/04/2014','DD/MM/YYYY'));
		INSERT INTO LIST_HASH VALUES ( 1003, 'Stephen', 'WA', TO_DATE('1/08/2010','DD/MM/YYYY'));
		INSERT INTO LIST_HASH VALUES ( 1002, 'Nick', 'NM', TO_DATE('1/08/2004','DD/MM/YYYY'));
		INSERT INTO LIST_HASH VALUES ( 1003, 'Rose', 'NY', TO_DATE('1/08/2010','DD/MM/YYYY'));
		
		
select partition_name,TABLESPACE_NAME,NUM_ROWS from user_tab_partitions where table_name='LIST_HASH';
---------------------------------------------------------------------------------------------------------------
PARTITION_NAME                 TABLESPACE_NAME                  NUM_ROWS
------------------------------ ------------------------------ ----------
WEST                           USERS                                   2
EAST                           USERS                                   1
NORTH                          USERS                                   1
SOUTH                          USERS                                   0




=======================================================================================================
										RANGE HASH
=======================================================================================================
CREATE TABLE RANGE_HASH (
	CUST_ID NUMBER(10),
	CUST_NAME VARCHAR2(25),
	CUST_STATE VARCHAR2(10),
	TIME_ID DATE)
	PARTITION BY RANGE (TIME_ID)
	SUBPARTITION BY HASH (CUST_ID) 
	SUBPARTITION TEMPLATE (
		SUBPARTITION SP1  TABLESPACE TSA1,
		SUBPARTITION SP2  TABLESPACE TSB2,
		SUBPARTITION SP3  TABLESPACE TSC3,
		SUBPARTITION SP4  TABLESPACE TSD4)
		(PARTITION PART1 VALUES LESS THAN (TO_DATE('1/01/2005','DD/MM/YYYY')),
		PARTITION PART2 VALUES LESS THAN (TO_DATE('1/01/2010','DD/MM/YYYY')),
		PARTITION PART3 VALUES LESS THAN (TO_DATE('1/01/2015','DD/MM/YYYY')),
		PARTITION FUTURE VALUES LESS THAN (MAXVALUE));
		
		
		INSERT INTO RANGE_HASH
		SELECT C.CUST_ID , C.CUST_FIRST_NAME || ' ' || 
		C.CUST_LAST_NAME,
		S.AMOUNT_SOLD, S.TIME_ID 
		FROM SH.SALES S, SH.CUSTOMERS C
		WHERE S.CUST_ID = C.CUST_ID 
		AND ROWNUM < 250001;
		
		
EXEC DBMS_STATS.GATHER_TABLE_STATS('kj59', 'RANGE_HASH');
select partition_name,TABLESPACE_NAME,NUM_ROWS from user_tab_partitions where table_name='RANGE_HASH';

=======================================================================================================
PARTITION_NAME                 TABLESPACE_NAME                  NUM_ROWS
------------------------------ ------------------------------ ----------
PART1                          USERS                              	2280
PART2                          USERS                               	1300
PART3                          USERS                               10980
FUTURE                         USERS                               12720
=======================================================================================================
										LIST LIST
=======================================================================================================
CREATE TABLE LIST_LIST (
	CUST_ID NUMBER(10),
	CUST_NAME VARCHAR2(25),
	CUST_STATE VARCHAR2(2),
	TIME_ID DATE)
	PARTITION BY LIST (CUST_STATE)
	SUBPARTITION BY LIST (CUST_ID) 
	SUBPARTITION TEMPLATE (
		SUBPARTITION SP1 VALUES (1,3,5) TABLESPACE TSA1,
		SUBPARTITION SP2 VALUES (2,4,6) TABLESPACE TSB2,
		SUBPARTITION SP3 VALUES (7,8,9,0) TABLESPACE TSC3)
		(PARTITION WEST VALUES ('OR','WA'),
		 PARTITION EAST VALUES ('AZ','UT','NM'),
		 PARTITION NORTH VALUES ('NY','VM','NJ'),
		 PARTITION SOUTH VALUES ('FL','GA'));
		
		INSERT INTO LIST_LIST VALUES ( 1, 'kj59', 'OR', TO_DATE('1/04/2014','DD/MM/YYYY'));
		INSERT INTO LIST_LIST VALUES ( 2, 'SIM', 'NM', TO_DATE('1/08/2004','DD/MM/YYYY'));
		INSERT INTO LIST_LIST VALUES ( 3, 'Harry', 'NY', TO_DATE('1/08/2010','DD/MM/YYYY'));
		INSERT INTO LIST_LIST VALUES ( 3, 'Rocky', 'WA', TO_DATE('1/08/2010','DD/MM/YYYY'));
------------------------------------------------------------------------------------------------------------------		
		select partition_name,TABLESPACE_NAME,NUM_ROWS from user_tab_partitions where table_name='LIST_LIST';
		select partition_name,TABLESPACE_NAME,NUM_ROWS from user_tab_partitions where table_name='LIST_LIST';
------------------------------------------------------------------------------------------------------------------		
PARTITION_NAME                 TABLESPACE_NAME                  NUM_ROWS
------------------------------ ------------------------------ ----------
WEST                           USERS                                   2
EAST                           USERS                                   1
NORTH                          USERS                                   1
SOUTH                          USERS                                   0

=======================================================================================================
											LIST RANGE
=======================================================================================================
CREATE TABLE LIST_RANGE (
	CUST_ID NUMBER(10),
	CUST_NAME VARCHAR2(25),
	CUST_STATE VARCHAR2(2),
	TIME_ID DATE)
	PARTITION BY RANGE (CUST_ID)
	SUBPARTITION BY LIST (CUST_STATE) 
	SUBPARTITION TEMPLATE (
		SUBPARTITION SP1 VALUES ('OR','WA') TABLESPACE TSA1,
		SUBPARTITION SP2 VALUES ('MH','NY')TABLESPACE TSB2,
		SUBPARTITION SP3 VALUES ('FL','GA') TABLESPACE TSC3,
		SUBPARTITION SP4 VALUES ('VM','NJ') TABLESPACE TSD4)
		(PARTITION ORIGINAL VALUES LESS THAN(1001),
		 PARTITION OTHER VALUES LESS THAN(2001),
		 PARTITION RECENT VALUES LESS THAN(3001),
		 PARTITION NEWEST VALUES LESS THAN(4001));
		INSERT INTO LIST_RANGE VALUES ( 1001, 'kj59', 'OR', TO_DATE('1/04/2014','DD/MM/YYYY'));
		INSERT INTO LIST_RANGE VALUES ( 3003, 'Oliver', 'VM', TO_DATE('1/08/2010','DD/MM/YYYY'));
		INSERT INTO LIST_RANGE VALUES ( 2002, 'SIM', 'FL', TO_DATE('1/08/2004','DD/MM/YYYY'));
		INSERT INTO LIST_RANGE VALUES ( 4000, 'Felecity', 'NY', TO_DATE('1/08/2010','DD/MM/YYYY'));
----------------------------------------------------------------------------------------------------------		
EXEC DBMS_STATS.GATHER_TABLE_STATS('kj59', 'LIST_RANGE');
select partition_name,TABLESPACE_NAME,NUM_ROWS from user_tab_partitions where table_name='LIST_RANGE';
----------------------------------------------------------------------------------------------------------		

PARTITION_NAME                 TABLESPACE_NAME                  NUM_ROWS
------------------------------ ------------------------------ ----------
ORIGINAL                       USERS                                   0
OTHER                          USERS                                   1
RECENT                         USERS                                   1
NEWEST                         USERS                                   2

=======================================================================================================
												END
=======================================================================================================